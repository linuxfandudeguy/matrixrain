---
---

<html lang="en">
<title>Matrix Rain</title>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    canvas {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;
    }
    body {
      margin: 0;
      overflow: hidden;
      background-color: black;
    }
  </style>
</head>
<body>
  <canvas id="matrix"></canvas>

  <script type="text/javascript">
    const canvas = document.getElementById('matrix');
    const ctx = canvas.getContext('2d');

    // Resize the canvas to fill the browser window
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    // Set font size for the characters
    const fontSize = 16;
    const columns = Math.floor(canvas.width / fontSize);

    // Create an array to store each column's position (for the drops)
    const drops = Array(columns).fill(0);

    // Function to generate a random character from various language and symbol ranges
    const randomCharacter = () => {
      const ranges = [
        // Basic Latin
        [0x0020, 0x007F], // Basic Latin (printable ASCII)
        // Latin-1 Supplement
        [0x00A0, 0x00FF],
        // Latin Extended
        [0x0100, 0x017F], // Latin Extended-A
        [0x0180, 0x024F], // Latin Extended-B
        // Greek and Coptic
        [0x0370, 0x03FF],
        // Cyrillic
        [0x0400, 0x04FF],
        // Hebrew
        [0x0590, 0x05FF],
        // Arabic
        [0x0600, 0x06FF],
        // Devanagari
        [0x0900, 0x097F],
        // Thai
        [0x0E00, 0x0E7F],
        // Hangul Jamo
        [0x1100, 0x11FF],
        // CJK Unified Ideographs
        [0x4E00, 0x9FFF],
        // CJK Compatibility Ideographs
        [0xF900, 0xFAFF],
        // CJK Unified Ideographs Extension A
        [0x3400, 0x4DBF],
        // CJK Unified Ideographs Extension B
        [0x20000, 0x2A6DF],
        // CJK Unified Ideographs Extension C
        [0x2A700, 0x2B73F],
        // CJK Unified Ideographs Extension D
        [0x2B740, 0x2B81F],
        // Ethiopic
        [0x1200, 0x137F],
        // Armenian
        [0x0530, 0x058F],
        // Georgian
        [0x10A0, 0x10FF],
        // Cherokee
        [0x13A0, 0x13FF],
        // Ogham
        [0x1680, 0x169F],
        // Runic
        [0x16A0, 0x16FF],
        // Symbol Ranges
        [0x2600, 0x26FF], // Miscellaneous Symbols
        [0x2700, 0x27BF], // Dingbats
        [0x1F170, 0x1F1FF], // Enclosed Alphanumeric Supplement
        [0x1F300, 0x1F5FF], // Miscellaneous Symbols and Pictographs (excluding traditional emojis)
        // Mathematical Alphanumeric Symbols
        [0x1D400, 0x1D7FF],
        // Combining Diacritical Marks
        [0x0300, 0x036F],
        // Combining Diacritical Marks Extended
        [0x1AB0, 0x1AFF],
        // Combining Diacritical Marks for Symbols
        [0x20D0, 0x20FF],
        // Braille Patterns
        [0x2800, 0x28FF],
        // Other ranges can be added here
      ];

      // Pick a random range
      const randomRange = ranges[Math.floor(Math.random() * ranges.length)];
      const randomCodePoint = Math.floor(Math.random() * (randomRange[1] - randomRange[0] + 1)) + randomRange[0];

      return String.fromCodePoint(randomCodePoint);
    };

    // Draw the falling characters
    const draw = () => {
      // Black background with opacity to create a trail effect
      ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Green text for characters
      ctx.fillStyle = '#0F0';
      ctx.font = `${fontSize}px monospace`;

      // Loop through the drops (columns)
      for (let i = 0; i < drops.length; i++) {
        // Generate a random character
        const char = randomCharacter();

        // Draw the character at the current drop's position
        ctx.fillText(char, i * fontSize, drops[i] * fontSize);

        // Reset the drop to the top of the canvas randomly
        if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {
          drops[i] = 0;
        }

        // Move the drop down
        drops[i]++;
      }
    };

    // Redraw the canvas at an interval to create the animation
    setInterval(draw, 50);

    // Adjust canvas size when the window is resized
    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });
  </script>
</body>
</html>
